events {
    worker_connections 1024;
}

http {
    upstream toko_backend {
        # Load balancer configuration
        least_conn;
        server toko-app:5000 max_fails=3 fail_timeout=30s;
        
        # Add more servers for horizontal scaling
        # server toko-app-2:5000 max_fails=3 fail_timeout=30s;
        # server toko-app-3:5000 max_fails=3 fail_timeout=30s;
        
        keepalive 32;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=10r/m;
    limit_req_zone $binary_remote_addr zone=chat:10m rate=1000r/m;

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=addr:10m;

    server {
        listen 80;
        server_name _;
        
        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";

        # Connection limits
        limit_conn addr 10;

        # Websocket upgrade support
        location /socket.io/ {
            proxy_pass http://toko_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket specific timeouts
            proxy_read_timeout 86400s;
            proxy_send_timeout 86400s;
            proxy_connect_timeout 60s;
            
            # Rate limiting for chat
            limit_req zone=chat burst=50 nodelay;
        }

        # API endpoints with rate limiting
        location /api/auth/ {
            proxy_pass http://toko_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Stricter rate limiting for auth
            limit_req zone=auth burst=5 nodelay;
        }

        location /api/ {
            proxy_pass http://toko_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # General API rate limiting
            limit_req zone=api burst=20 nodelay;
            
            # Health check bypass (no rate limiting)
            location /api/health {
                proxy_pass http://toko_backend;
                access_log off;
            }
        }

        # Static files (frontend)
        location / {
            proxy_pass http://toko_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Caching for static assets
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2)$ {
                proxy_pass http://toko_backend;
                proxy_cache_valid 200 1d;
                add_header Cache-Control "public, immutable";
            }
        }

        # Block common attack patterns
        location ~* (\.php|\.asp|\.aspx|\.jsp)$ {
            return 404;
        }

        # Security - block access to sensitive files
        location ~ /\. {
            deny all;
        }
    }

    # HTTPS server (for production with SSL certificates)
    # server {
    #     listen 443 ssl http2;
    #     server_name your-domain.com;
    #     
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;
    #     
    #     # ... rest of configuration same as HTTP
    # }
}